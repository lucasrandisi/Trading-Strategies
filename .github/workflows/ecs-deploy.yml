name: Deploy to Amazon ECS

on:
  workflow_run:
    workflows: [ "PHP Unit Testing" ]
    types:
      - completed
    branches: [ "master" ]

env:
  AWS_REGION: sa-east-1
  ECR_REPOSITORY: trading_strategies_laravel
  ECS_SERVICE: trading_strategies_service_2
  ECS_CLUSTER: cluster-1
  ECS_TASK_DEFINITION: deploy/ecs/trading_strategies_task.json
  CONTAINER_NAME: laravel
  WWWUSER: 1000
  WWWGROUP: 1000

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'master'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build \
            --file docker/laravel/Dockerfile \
            --build-arg WWWUSER=${{ env.WWWUSER }} \
            --build-arg WWWGROUP=${{ env.WWWGROUP }} \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest  .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deploy/ecs/trading_strategies_task_definition.json
          container-name: laravel
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false
